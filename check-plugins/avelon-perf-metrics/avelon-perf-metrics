#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import json  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.args  # pylint: disable=C0413
import lib.base  # pylint: disable=C0413
import lib.human  # pylint: disable=C0413
import lib.avelon  # pylint: disable=C0413
import lib.test  # pylint: disable=C0413
import lib.time  # pylint: disable=C0413
import lib.txt  # pylint: disable=C0413
from lib.globals import (STATE_OK, STATE_UNKNOWN,  # pylint: disable=C0413
                          STATE_WARN, STATE_CRIT)

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2024062401'

DESCRIPTION = """Retrieve the performance data of the various data points 
                 of your Avelon Cloud and present them in a readable format."""

DEFAULT_INSECURE  = False
DEFAULT_NO_PROXY = False
DEFAULT_TIMEOUT = 8

def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

# parameter alphabetisch
    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
    )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
    )

    parser.add_argument(
        '--client-id',
        help='Avelon API client_id.',
        dest='CLIENT_ID',
        required=True,
    )

    parser.add_argument(
        '--client-secret',
        help='Avelon API client_secret.',
        dest='CLIENT_SECRET',
        required=True,
    )
    
    parser.add_argument(
        '--insecure',
        help='This option explicitly allows to perform "insecure" SSL connections. '
             'Default: %(default)s',
        dest='INSECURE',
        action='store_true',
        default=DEFAULT_INSECURE,
    )

    parser.add_argument(
        '--no-proxy',
        help='Do not use a proxy.'
             'Default: %(default)s',
        dest='NO_PROXY',
        action='store_true',
        default=DEFAULT_NO_PROXY,
    )

    parser.add_argument(
        '--password',
        help='Avelon Cloud password.',
        dest='PASSWORD',
        required=True,
    )

    parser.add_argument(
        '--username',
        help='Avelon Cloud username.',
        dest='USERNAME',
        required=True,
    )

    parser.add_argument(
        '--test',
        help='For unit tests. '
             'Needs "path-to-stdout-file,path-to-stderr-file,expected-retc".',
        dest='TEST',
        type=lib.args.csv,
    )

    parser.add_argument(
        '--timeout',
        help='Network timeout in seconds. '
             'Default: %(default)s (seconds)',
        dest='TIMEOUT',
        type=int,
        default=DEFAULT_TIMEOUT,
    )

    return parser.parse_args()


def main():
    """The main function.
    """
    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # init some vars
    msg = ''
    data_point_table = []
    perfdata = ''

    if args.TEST is None:
        # get token
        success, token = lib.avelon.get_token(
            client_id=args.CLIENT_ID,
            client_secret=args.CLIENT_SECRET,
            username=args.USERNAME,
            password=args.PASSWORD,
            insecure=args.INSECURE,
            no_proxy=args.NO_PROXY,
            timeout=args.TIMEOUT,
        )
        if not success:
            lib.base.cu(token)
            
        # get data points
        success, data_points = lib.avelon.get_data_points(
            access_token=token['access_token'],
            insecure=args.INSECURE,
            no_proxy=args.NO_PROXY,
            timeout=args.TIMEOUT,
        )

        if not success:
            lib.base.cu(data_points)
    else:
        # do not call the command, put in test data
        stdout, stderr, retc = lib.test.test(args.TEST)
        data_points = json.loads(stdout)

    for data_point in data_points:
        if not isinstance(data_point['value'], str):
            data_point_table.append({
                'id': data_point['id'],
                'systemName': data_point['systemName'],
                'label': data_point['label'],
                'value': str(data_point['value']) + ' ' + data_point['unitSymbol'],
            })

            # perfdata
            try:
                perfdata += lib.base.get_perfdata(data_point['systemName'], data_point['value'], data_point['unitSymbol'])
            except:
                pass

    # build the message
    if data_point_table:
        keys = [
            'systemName',
            'id',
            'label',
            'value',
        ]
        headers = [
            'Sytem Name',
            'ID',
            'Label',
            'Value',
        ]

        msg += lib.base.get_table(
                sorted(data_point_table, key=lambda d: d['systemName']),
                keys,
                header=headers,
            )
        
    # over and out
    lib.base.oao(msg, 0, perfdata, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base.cu()